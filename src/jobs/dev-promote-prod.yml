description: >
  Promote a dev version of an orb to a semantic production release.
  In order to promote the orb, the commit subject must include the `[semver:FOO]`
  pattern, where FOO is major, minor, patch, or skip (to skip promotion).
  i.e. 'Merge pull request #XX from some-branch [semver:minor]'
  Designed to run at the conclusion of an integration-testing workflow.

executor: cli/default

parameters:
  publish-token-variable:
    type: env_var_name
    default: CIRCLE_TOKEN
    description: >
      Name of environment variable containing your CircleCI API token

  orb-name:
    type: string
    description: >
      Semver-less name of an orb, e.g. circleci/orb-tools

  orb-ref:
    type: string
    default: dev:${CIRCLE_SHA1:0:7}
    description: >
      Dev:reference to promote to a production release, defaults to
      'dev:${CIRCLE_SHA1:0:7}' (evaluates to the first 7
      characters of the job's commit hash)

  add-pr-comment:
    type: boolean
    description: >
      CircleCI can comment on the merged PR with the final production version.
      If you want contributors to see a message with the production version,
      please provide the username & token, and ensure the merge commit subject
      includes the PR number in default format.
      i.e. 'Merge pull request #XX from some-branch [semver:patch]'

  bot-user:
    type: string
    description: >
      The GitHub user to post PR comment.
    default: ""

  bot-token-variable:
    description: >
      Name of env var containing the GitHub token value of the GitHub user that
      to be used for posting the PR comment. Pass this as a raw string such
      as GITHUB_TOKEN. Do not paste the actual token into your
      configuration.
    type: env_var_name
    default: PR_COMMENTER_GITHUB_TOKEN

  publish-version-tag:
    type: boolean
    default: true
    description: >
      Push a git tag describing the release that was just published? If `true`,
      make sure to pass SSH fingerprints, as well

  cleanup-tags:
    type: boolean
    default: false
    description: >
      After publishing a version tag for a successful orb deployment, clean
      up older tags? Use the `cleanup-tags-pattern` parameter to specify
      which tags should be removed

  cleanup-tags-pattern:
    type: string
    default: "master*"
    description: >
      After publishing a version tag for a successful orb deployment, optionally clean up all older tags that meet a given `git tag -l` wildcard pattern. Defaults to a wildcard pattern including any tags starting with the string `master`.

  ssh-fingerprints:
    type: string
    default: ""
    description: >
      Fingerprints for SSH deploy key (add the public key as a read/write
      key on GitHub; add the private key in CircleCI via SSH Permissions,
      with github.com as Hostname). Used to push a git tag back to the
      project's repository.

steps:
  - when:
      condition: <<parameters.publish-version-tag>>
      steps:
        - checkout

  - dev-promote-semver:
      token-variable: <<parameters.publish-token-variable>>
      dev-version: <<parameters.orb-name>>@<<parameters.orb-ref>>
      add-pr-comment: <<parameters.add-pr-comment>>
      bot-user: <<parameters.bot-user>>
      bot-token-variable: <<parameters.bot-token-variable>>

  - when:
      condition: <<parameters.publish-version-tag>>
      steps:
        - add_ssh_keys:
            fingerprints:
              - <<parameters.ssh-fingerprints>>

        - run:
            name: git config
            command: |
              git config --global user.email "$CIRCLE_USERNAME@users.noreply.github.com"
              git config --global user.name "$CIRCLE_USERNAME"

              # construct/push new tag
              NEW_VERSION=$(circleci orb info <<parameters.orb-name>> | grep Latest | sed -E 's|Latest: <<parameters.orb-name>>@||')

              TAG="v$NEW_VERSION"

              git tag -a "$TAG" \
                -m "View this orb release in the orb registry:" \
                -m "https://circleci.com/orbs/registry/orb/<<parameters.orb-name>>?version=$NEW_VERSION" \
                -m "View this orb release using the CircleCI CLI:" \
                -m "\`circleci orb source <<parameters.orb-name>>@$NEW_VERSION\`"

              git push origin "$TAG"

              # delete local tags
              git tag -d $(git tag -l "<<parameters.cleanup-tags-pattern>>")

              # fetch remote tags
              git fetch

              # delete remote tag
              git push origin --delete $(git tag -l git tag -l "<<parameters.cleanup-tags-pattern>>") || true
