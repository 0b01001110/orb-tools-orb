description: |
  Automatically shellcheck the run statements within your jobs and commands.

executor: cli/default

parameters:
  source-dir:
    description: Path containing the orb source files.
    type: string
    default: "src"
  exclude:
    description: >
      Enter a comma-separated list, with no spaces, of errors to ignore. Example: "SC1009,SC1073"
    type: string
    default: ""

steps:
  - checkout
  - run:
      name: Install shellcheck
      command: |
        if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi
        $SUDO apt-get install shellcheck
  - run:
      name: Install YQ
      command: |
        if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi
        wget https://github.com/mikefarah/yq/releases/download/3.2.1/yq_linux_386
        $SUDO mv yq_linux_386 /usr/local/bin/yq
        $SUDO chmod +x /usr/local/bin/yq
  - run:
      name: ShellCheck
      command: |
        set +e
        # Set colors for terminal output
        term_red=$'\e[1;31m'
        term_green=$'\e[1;32m'
        term_end=$'\e[0m'

        ORB_SOURCE_FILES=$(find << parameters.source-dir >> -type f -name "*.yml" -o -name "*.yaml")
        SC_ERROR_COUNT=0

        # EXCLUSIONS
        # SC2148 - Missing shebang, this is to be expected.
        # SC1044 - "\<<" parameter notation before the text replacement will appear like a here document with no EOF. Ignore this error for now.
        # SC1072 - Not entirely sure on this one: https://github.com/koalaman/shellcheck/wiki/SC1072. Temporarily adding.
        # SC1090 - https://github.com/koalaman/shellcheck/wiki/SC1090

        EXCLUDED_SHELL_ERRORS=SC2148,SC1044,SC1072,SC1090<<#parameters.exclude>>,<</parameters.exclude>><<parameters.exclude>>

        ###
        # For each file
        ###
        for file in $ORB_SOURCE_FILES
        do
          # Get the number of steps
          echo -----
          echo "Scanning $file"
          ORB_STEP_COUNT=$(yq r "$file" --length steps)
          i=0
          while [[ $i -lt $ORB_STEP_COUNT ]]
            ###
            # For each step in that file
            ###
          do
            # flag to determine if the command should be sent to shellcheck
            SCRIPT_TO_SHELLCHECK=""

            if [[ $(yq r "$file" steps[$i] --length) == "1" && $(yq r "$file" steps[$i].run) ]]; then
              # Step is a single run statement with no other keys
              SCRIPT_TO_SHELLCHECK=$(yq r "$file" steps[$i].run)
            fi

            if [[ $(yq r "$file" steps[$i].run.command) && ! $(yq r "$file" steps[$i].run.shell) ]]; then
              # Step has a command key, and no shell key
              SCRIPT_TO_SHELLCHECK=$(yq r "$file" steps[$i].run.command)
            fi

            if [[ -n "$SCRIPT_TO_SHELLCHECK" ]]; then
              echo "$SCRIPT_TO_SHELLCHECK" | shellcheck --exclude $EXCLUDED_SHELL_ERRORS -
              if [[ $? == 1 ]]; then
                # When an error is discovered
                printf "${term_red}Error discovered in $file at step $((i+1))${term_end}\n"
                echo ---
                echo
                ((SC_ERROR_COUNT++))
              fi
            fi
            ((i++))
          done
          echo
        done
        set -e
        if [ "$SC_ERROR_COUNT" -gt 0 ]; then
          echo -------------------------------------
          printf "${term_red}Shellcheck has discovered errors. Please view and correct the errors shown above.${term_end}\n"
          printf "${term_red}If desired, error codes may also be added to the exclusion list via the exclude parameter${term_end}\n"
          echo -------------------------------------
          exit 1
        else
          echo -------------------------------------
          printf "${term_green}Shellcheck passed.${term_end}\n"
          echo -------------------------------------
          exit 0
        fi
