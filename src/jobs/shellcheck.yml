description: |
  Automatically shellcheck the run statements within your jobs and commands.

executor: cli/default

parameters:
  source-dir:
    description: Path containing the orb source files.
    type: string
    default: "src"

steps:
  - checkout
  - run:
      name: Install shellcheck
      command: apt-get install shellcheck
  - run:
      name: Install YQ
      command: |
        wget -O yq -P /usr/bin/ https://github.com/mikefarah/yq/releases/download/3.2.1/yq_linux_amd64
  - run:
      name: ShellCheck
      command: |
        set +e
        # Set colors for terminal output
        term_red=$'\e[1;31m'
        term_green=$'\e[1;32m'
        term_end=$'\e[0m'

        ORB_SOURCE_FILES="<< parameters.source-dir >>/**/*.yml"
        SC_ERROR_COUNT=0

        ###
        # For each file
        ###
        for file in $ORB_SOURCE_FILES
        do
          # Get the number of steps
          echo -----
          echo "Scanning $file"
          ORB_STEP_COUNT=$(yq r $file --length steps)
          i=0
          while [[ $i -lt $ORB_STEP_COUNT ]]
            ###
            # For each step in that file
            ###
          do
            if [[ $(yq r $file steps[$i].run.command) ]]; then
              ###
              # If that step is a "run" step with a "command" key
              ###
              # EXCLUSIONS
                # SC2148 - Missing shebang, this is to be expected.
                # SC1044 - "<<" parameter notation before the text replacement will appear like a here document with no EOF. Ignore this error for now.
                # SC1072 - Not entirely sure on this one: https://github.com/koalaman/shellcheck/wiki/SC1072. Temporarily adding.
              yq r $file steps[$i].run.command | shellcheck -e SC2148 -e SC1044 -e SC1072 -
              if [[ $? == 1 ]]; then
                # When an error is discovered
                printf "${term_red}Error discovered in $file at step $(($i+1))${term_end}\n"
                echo ---
                echo
                ((SC_ERROR_COUNT++))
              fi
            fi
            ((i++))
          done
          echo
        done
        set -e
        if [ $SC_ERROR_COUNT -gt 0 ]; then
          echo -------------------------------------
          printf "${term_red}Shellcheck has discovered errors. Please view and correct the errors shown above.${term_end}\n"
          echo -------------------------------------
          exit 1
        else
          echo -------------------------------------
          printf "${term_green}Shellcheck passed.${term_end}\n"
          echo -------------------------------------
          exit 0
        fi
