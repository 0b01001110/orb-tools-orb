description: >
  Check that env-var parameters are defined, produce an error otherwise

parameters:
  command-name:
    type: string
    default: Checking if parameters are defined...
    description: Name for CircleCI step output

  param:
    type: string
    default: ""
    description: >
      Comma-separated list of `env_var_name`-type values; all will be
      checked to ensure they are defined. Designed to be called at the
      beginning of an orb job or command, with a value like the following:
      `<<parameters.foo>>,<<parameters.bar>>,<<parameters.baz>`, etc.

  error-message:
    type: string
    default: ""
    description: >
      Optional custom message to print if parameter is undefined. A
      standard message describing the missing environment variable
      which produced the error is always printed, but this can be used
      to pass a custom string to provide more specific information.

  exit-if-undefined:
    type: boolean
    default: true
    description: >
      Should a job automatically fail if the given parameter is not defined?

steps:
  - run:
      name: <<parameters.command-name>>
      command: |
        if [[ <<parameters.param>> == "" ]]; then
          echo "No required environment variables to check; moving on"
        else
          IFS="," read -ra PARAMS \<<< "<<parameters.param>>"

          for i in "${PARAMS[@]}"; do
            if [[ -z "${i}" ]]; then
              echo "ERROR: Missing environment variable {i}" >&2

              if [[ -n "<<parameters.error-message>>" ]]; then
                echo "<<parameters.error-message>>" >&2
              fi

              <<#parameters.exit-if-undefined>>exit 1<</parameters.exit-if-undefined>>
            else
              echo "Yes, ${i} is defined!"
            fi
          done
        fi
