description: >
  Uses the CLI to promote a dev version of an orb to the registry.
  This command supports Semantic Versioning support.
  It assumes the context of a GitHub pull request, and promotion of
  the orb to a new major/minor/patch version is
  based on information that must be contained in the subject of
  the commit that merges the pull request.
  Namely, the commit subject must include the `[semver:FOO]` pattern,
  where FOO is major, minor, patch, or skip (to skip promotion).
  e.g. 'Merge pull request #XX from some-branch [semver:minor]'

parameters:
  orb-name:
    type: string
    description: >
      Semver-less name of an orb, e.g. circleci/orb-tools

  orb-ref:
    type: string
    default: dev:${CIRCLE_SHA1:0:7}
    description: >
      Dev:reference to promote to a production release, defaults to
      'dev:${CIRCLE_SHA1:0:7}' (evaluates to the first 7
      characters of the job's commit hash)

  token-variable:
    description: >
      Name of env var containing your token. Pass this as a raw string such
      as ORB_PUBLISHING_TOKEN. Do not paste the actual token into your
      configuration. If omitted it's assumed the CLI has already been setup
      with a valid token.
    type: env_var_name
    default: CIRCLE_TOKEN

  add-pr-comment:
    description: >
      CircleCI can comment on the merged PR with the final production version.
      If you want contributors to see a message with the production version,
      please provide the username & token, and ensure the merge commit subject
      includes the PR number in default format.
      i.e. 'Merge pull request #XX from some-branch'
    type: boolean

  pr-number-sed-expression:
    description: >
      Used to extract the PR number from the commit subject with sed.
      The default value works with the default
      GitHub PR merge commit subject.
      Only applicable when add-pr-comment is set to true.
    type: string
    default: 's/Merge pull request #\([0-9]*\) from.*/\1/p'

  bot-user:
    description: >
      The GitHub user to post PR comment.
      Only applicable when add-pr-comment is set to true.
    type: string
    default: ""

  bot-token-variable:
    description: >
      Name of env var containing the GitHub token value of the GitHub user that
      to be used for posting the PR comment. Pass this as a raw string such
      as GITHUB_TOKEN. Do not paste the actual token into your
      configuration.
      Only applicable when add-pr-comment is set to true.
    type: env_var_name
    default: PR_COMMENTER_GITHUB_TOKEN

  checkout:
    description: >
      Whether to perform the CircleCI checkout step.
    type: boolean
    default: true

  fail-if-semver-not-indicated:
    description: >
      Whether to fail if the commit subject did not include [semver:patch|minor|major|skip]
    type: boolean

steps:
  - when:
      condition: <<parameters.checkout>>
      steps:
        - checkout
  - run:
      name: Promote dev orb to production
      command: |
        COMMIT_SUBJECT=`git log -1 --pretty=%s.`
        SEMVER_INCREMENT=`echo ${COMMIT_SUBJECT} | sed -En 's/.*\[semver:(major|minor|patch|skip)\].*/\1/p'`
        echo "Commit subject: ${COMMIT_SUBJECT}"
        echo "export SEMVER_INCREMENT=\"$SEMVER_INCREMENT\""  >> $BASH_ENV
        if [ -z ${SEMVER_INCREMENT} ];then
          echo "Commit subject did not indicate which SemVer increment to make."
          echo "To publish orb, you can ammend the commit or push another commit with [semver:FOO] in the subject where FOO is major, minor, patch."
          echo "Note: To indicate intention to skip promotion, include [semver:skip] in the commit subject instead."
          if [ "<<parameters.fail-if-semver-not-indicated>>" == "true" ];then
            exit 1
          else
            echo "export PR_MESSAGE=\"BotComment: Orb publish was skipped due to [semver:patch|minor|major] not being included in commit message.\""  >> $BASH_ENV
          fi
        elif [ "$SEMVER_INCREMENT" == "skip" ];then
          echo "SEMVER in commit indicated to skip orb release"
          echo "export PR_MESSAGE=\"BotComment: Orb publish was skipped due to [semver:skip] in commit message.\""  >> $BASH_ENV
        else
          PUBLISH_MESSAGE=`circleci orb publish promote <<parameters.orb-name>>@<<parameters.orb-ref>> ${SEMVER_INCREMENT} --token $<< parameters.token-variable >>`
          echo $PUBLISH_MESSAGE
          ORB_VERSION=$(echo $PUBLISH_MESSAGE | sed -n 's/Orb .* was promoted to `\(.*\)`.*/\1/p')
          echo "export PR_MESSAGE=\"BotComment: *Production* version of orb available for use - \\\`${ORB_VERSION}\\\`\"" >> $BASH_ENV
          echo "export ORB_VERSION=\"$ORB_VERSION\"" >> $BASH_ENV
        fi
  - when:
      condition: <<parameters.add-pr-comment>>
      steps:
        - post-pr-comment:
            comment: $PR_MESSAGE
            pr-number-sed-expression: <<parameters.pr-number-sed-expression>>
            bot-user: <<parameters.bot-user>>
            bot-token-variable: <<parameters.bot-token-variable>>
