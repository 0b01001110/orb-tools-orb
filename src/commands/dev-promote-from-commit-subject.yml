description: >
  Uses the CLI to promote a dev version of an orb to the registry.
  This command supports Semantic Versioning support.
  It assumes the context of a GitHub pull request, and promotion of
  the orb to a new major/minor/patch version is
  based on information that must be contained in the subject of
  the commit that merges the pull request.
  Namely, the commit subject must include the `[semver:FOO]` pattern,
  where FOO is major, minor, patch, or skip (to skip promotion).
  e.g. 'Merge pull request #XX from some-branch [semver:minor]'

parameters:
  dev-version:
    description: "A fully-qualified reference to a *development* orb. This takes the form <namespace>/<orb-name>@dev:<label>"
    type: string

  token-variable:
    description: >
      Name of env var containing your token. Pass this as a raw string such
      as ORB_PUBLISHING_TOKEN. Do not paste the actual token into your
      configuration. If omitted it's assumed the CLI has already been setup
      with a valid token.
    type: env_var_name
    default: CIRCLE_TOKEN

  add-pr-comment:
    description: >
      CircleCI can comment on the merged PR with the final production version.
      If you want contributors to see a message with the production version,
      please provide the username & token, and ensure the merge commit subject
      includes the PR number in default format.
      i.e. 'Merge pull request #XX from some-branch'
    type: boolean

  pr-number-sed-expression:
    description: >
      Used to extract the PR number from the commit subject with sed.
      The default value works with the default
      GitHub PR merge commit subject.
      Only applicable when add-pr-comment is set to true.
    type: string
    default: 's/Merge pull request #\([0-9]*\) from.*/\1/p'

  bot-user:
    description: >
      The GitHub user to post PR comment.
      Only applicable when add-pr-comment is set to true.
    type: string
    default: ""

  bot-token-variable:
    description: >
      Name of env var containing the GitHub token value of the GitHub user that
      to be used for posting the PR comment. Pass this as a raw string such
      as GITHUB_TOKEN. Do not paste the actual token into your
      configuration.
      Only applicable when add-pr-comment is set to true.
    type: env_var_name
    default: PR_COMMENTER_GITHUB_TOKEN

  do-project-checkout:
    description: >
      Whether to perform the CircleCI checkout step.
    type: boolean
    default: true

steps:
  - when:
      condition: <<parameters.do-project-checkout>>
      steps:
        - checkout
  - run:
      name: Promote to prod
      command: |
        SEMVER_INCREMENT=`git log -1 --pretty=%s. | sed -En 's/.*\[semver:(major|minor|patch|skip)\].*/\1/p'`
        if [ -z ${SEMVER_INCREMENT} ];then
          echo "Merge commit did not indicate which SemVer increment to make. Please ammend commit with [semver:FOO] where FOO is major, minor, patch, or skip (to skip promotion)"
          exit 1
        elif [ "$SEMVER_INCREMENT" == "skip" ];then
          echo "SEMVER in commit indicated to skip orb release"
          echo "export PR_MESSAGE=\"BotComment: Orb publish was skipped due to [semver:skip] in commit message.\""  >> $BASH_ENV
        else
          PUBLISH_MESSAGE=`circleci orb publish promote <<parameters.dev-version>> ${SEMVER_INCREMENT} --token $<< parameters.token-variable >>`
          echo $PUBLISH_MESSAGE
          ORB_VERSION=$(echo $PUBLISH_MESSAGE | sed -n 's/Orb .* was promoted to `\(.*\)`.*/\1/p')
          echo "export PR_MESSAGE=\"BotComment: *Production* version of orb available for use - \\\`${ORB_VERSION}\\\`\"" >> $BASH_ENV
        fi
  - when:
      condition: <<parameters.add-pr-comment>>
      steps:
        - post-pr-comment:
            comment: $PR_MESSAGE
            pr-number-sed-expression: <<parameters.pr-number-sed-expression>>
            bot-user: <<parameters.bot-user>>
            bot-token-variable: <<parameters.bot-token-variable>>
